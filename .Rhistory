sent_afinn_ratio =        (positive/negative),
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned)
)
# creating four score indices
sentiment_scores_afinn <- transmute(sentiment_corpus_combined,
sent_afinn_ratio =        (positive/negative),
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned)
)
# creating four score indices
sentiment_scores_afinn <- transmute(sentiment_corpus_combined,
sent_afinn_ratio =        (positive/negative),
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned)
)
# creating four score indices
sentiment_scores_afinn <- transmute(sentiment_corpus_combined,
sent_afinn_ratio =        (positive/negative),
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned)
)
# creating four score indices
sentiment_scores_afinn <- transmute(sentiment_corpus_combined,
sent_afinn_ratio =        (positive/negative),
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned)
)
# creating four score indices
sentiment_scores_afinn <- transmute(sentiment_corpus_combined,
sent_afinn_ratio =        (positive/negative),
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned)
)
# creating four score indices
sentiment_scores_afinn <- transmute(sentiment_corpus_combined,
sent_afinn_ratio =        (positive/negative),
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned)
)
# creating four score indices
sentiment_scores_afinn <- transmute(sentiment_corpus_combined,
sent_afinn_ratio =        (positive/negative),
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned)
)
# creating four score indices
sentiment_scores_afinn <- transmute(sentiment_corpus_combined,
sent_afinn_ratio =        (positive/negative),
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned)
)
# creating four score indices
sentiment_scores_afinn <- transmute(sentiment_corpus_combined,
sent_afinn_ratio =        (positive/negative),
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned)
)
# creating four score indices
sentiment_scores_afinn <- transmute(sentiment_corpus_combined,
sent_afinn_ratio =        (positive/negative),
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned)
)
# creating four score indices
sentiment_scores_afinn <- transmute(sentiment_corpus_combined,
sent_afinn_ratio =        positive/negative,
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned)
)
apply(sentiment_scores_afinn, 2, function(x){max(x)-min(x)})
{function(x)max(x)-min(x)} (data$sentiment_valence)
apply(sentiment_scores_afinn, 2, range)
range(data$sentiment_valence)
sentiment_scores_afinn <- transmute(sentiment_corpus_combined,
sent_afinn_ratio =        (positive)/(negative),
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned)
)
apply(sentiment_scores_afinn, 2, function(x){max(x)-min(x)})
{function(x)max(x)-min(x)} (data$sentiment_valence)
apply(sentiment_scores_afinn, 2, range)
range(data$sentiment_valence)
# creating four score indices
sentiment_scores_afinn <- transmute(sentiment_corpus_combined,
sent_afinn_ratio = (positive)/(negative),
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned)
)
# removing intermediary data
#rm(sentiment_corpus_combined)
# checking ranges and extremes
apply(sentiment_scores_afinn, 2, function(x){max(x)-min(x)})
{function(x)max(x)-min(x)} (data$sentiment_valence)
apply(sentiment_scores_afinn, 2, range)
range(data$sentiment_valence)
# creating four score indices
sentiment_scores_afinn <- transmute(sentiment_corpus_combined,
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned)
)
# removing intermediary data
#rm(sentiment_corpus_combined)
# checking ranges and extremes
apply(sentiment_scores_afinn, 2, function(x){max(x)-min(x)})
{function(x)max(x)-min(x)} (data$sentiment_valence)
apply(sentiment_scores_afinn, 2, range)
range(data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(x)-min(x)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
{function(x,y) (max(x)-min(x))/(max(y)-min(y)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
test <- sentiment_scores_afinn %>%
transmute(
sent_afinn_weighted = sent_afinn_weighted /
{function(x,y) (max(x)-min(x))/(max(y)-min(y)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
)
test <- sentiment_scores_afinn %>%
transmute(
sent_afinn_weighted = sent_afinn_cleaned.sqrt /
{function(x,y) (max(x)-min(x))/(max(y)-min(y)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
)
test
range(test)
range(data$sentiment_valence)
test <- sentiment_scores_afinn %>%
transmute(
sent_afinn_weighted = sent_afinn_cleaned.sqrt /
{function(x,y) (max(x)-min(x))/(max(y)-min(y)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
) %>%
cbind(data)
test
glimpse(test)
data <- sentiment_scores_afinn %>%
transmute(
sent_afinn_weighted = sent_afinn_cleaned.sqrt /
{function(x,y) (max(x)-min(x))/(max(y)-min(y)) } (sentiment_scores_afinn$sent_afinn_cleaned.sqrt, data$sentiment_valence)
) %>%
cbind(data)
glimpse(data)
fig_valence_shifters
fig_valence_shifters <- ggplot(data %>% filter(president == "Barack Obama"),aes(x=date,y=sentiment_valence, color = sentiment_valence)) + geom_point() +
geom_smooth(aes(x=date,y=sentiment_valence),method=lm, se=FALSE)
fig_valence_shifters
fig_afinn <- ggplot(data %>% filter(president == "Barack Obama"),aes(x=date,y=sent_afinn_weighted, color = sentiment_valence))+
geom_point() +
geom_smooth(aes(x=date,y=sent_afinn_weighted),method=lm, se=FALSE)
fig_afinn
fig_valence_shifters <- ggplot(data,aes(x=date,y=sentiment_valence, color = sentiment_valence)) +
geom_point() +
geom_smooth(aes(x=date,y=sentiment_valence),method=lm, se=FALSE)
## plots with quanteda and afinn
fig_afinn <- ggplot(data,aes(x=date,y=sent_afinn_weighted, color = sentiment_valence))+
geom_point() +
geom_smooth(aes(x=date,y=sent_afinn_weighted),method=lm, se=FALSE)
fig_afinn
fig_valence_shifters
fig_valence_shifters <- ggplot(data,aes(x=date,y=sentiment_valence, color = sentiment_valence), alpha = 0.2) +
geom_point() +
geom_smooth(aes(x=date,y=sentiment_valence),method=lm, se=FALSE)
## plots with quanteda and afinn
fig_afinn <- ggplot(data,aes(x=date,y=sent_afinn_weighted, color = sentiment_valence), alpha = 0.2)+
geom_point() +
geom_smooth(aes(x=date,y=sent_afinn_weighted),method=lm, se=FALSE)
## plot output----
fig_afinn
fig_valence_shifters
fig_valence_shifters <- ggplot(data,aes(x=date,y=sentiment_valence, color = sentiment_valence)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=sentiment_valence),method=lm, se=FALSE)
## plots with quanteda and afinn
fig_afinn <- ggplot(data,aes(x=date,y=sent_afinn_weighted, color = sentiment_valence))+
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=sent_afinn_weighted),method=lm, se=FALSE)
## plot output----
fig_afinn
fig_valence_shifters
sum(data$sent_afinn_weighted == 0)
select(data$sent_afinn_weighted == 0)
select(subset(data$sent_afinn_weighted == 0))
select(data, subset(data$sent_afinn_weighted == 0))
select(data, subset(data$sent_afinn_weighted == 0))
?select
filter(data, sent_afinn_weighted == 0)
glimpse(filter(data, sent_afinn_weighted == 0))
sentiment_scores_afinn <- transmute(sentiment_corpus_combined,
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned),
p = positive,
n = negative
)
glimpse(sentiment_scores_afinn)
glimpse(filter(sentiment_scores_afinn, sent_afinn_cleaned.sqrt == 0))
#two of these mirror the formula used by sentimentr by taking the squareroot of n before dividing
sentiment_scores_afinn <- transmute(sentiment_corpus_combined,
sent_afinn =              (positive-negative)/(n_tokens),
sent_afinn.sqrt =         (positive-negative)/sqrt(n_tokens),
sent_afinn_cleaned =      (positive-negative)/(n_tokens_cleaned),
sent_afinn_cleaned.sqrt = (positive-negative)/sqrt(n_tokens_cleaned),
p = positive,
n = negative,
c = n_tokens_cleaned
)
glimpse(filter(sentiment_scores_afinn, sent_afinn_cleaned.sqrt == 0))
?gather
test <-  data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence))
glimpse(test)
ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_grid(type_of_index, type_of_index)
# set wd to where the sour%
ce file is
ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_grid("type_of_index" ~ "type_of_index")
ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_grid(, ~ "type_of_index")
ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_grid(. ~ "type_of_index")
ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_wrap(. ~ "type_of_index")
ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_wrap(. ~ "type_of_index")
glimpse(test <- data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)))
head(summary(test$type_of_index <- data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence))))
head(test$type_of_index <- data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)))
glimpse(test <- data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)))
test$type_of_index
unique(test$type_of_index)
ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_wrap( ~ "type_of_index", nrow = 2)
ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_wrap(~ "type_of_index", nrow = 2)
test <- data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence))
unique(test$type_of_index)
ggplot(data %>% gather(as.factor(key = "type_of_index"), value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_wrap(~ "type_of_index", nrow = 2)
ggplot(data %>% gather(as.factor(key = "type_of_index"), value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_wrap(~ "type_of_index", nrow = 2)
ggplot(data %>% gather(as.factor(key) = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_wrap(~ "type_of_index", nrow = 2)
test <- data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence))
unique(test$type_of_index)
ggplot(data %>% gather(as.factor(key) = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_wrap(~ "type_of_index", nrow = 2)
ggplot(data %>% gather(as.factor(key) = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_wrap(~ "type_of_index", nrow = 2)
ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_wrap(~ "type_of_index", nrow = 2)
ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_grid(rows = vars(type_of_index))
ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_grid(cols = vars(type_of_index))
ggplot(data %>% gather(key = "type_of_index", value = "computed_sentiment", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_grid(cols = vars(type_of_index))
ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_grid(cols = vars(type_of_index))
ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=TRUE) +
facet_grid(cols = vars(type_of_index))
test <- data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence))
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(value)) +
geom_histogram(alpha = 0.2) +
facet_grid(cols = vars(type_of_index))
fig_index_comparison2
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(value)) +
geom_histogram(alpha = 0.2, binwidth = 5) +
facet_grid(cols = vars(type_of_index))
fig_index_comparison2
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(value)) +
geom_histogram(alpha = 0.2, binwidth = .01) +
facet_grid(cols = vars(type_of_index))
fig_index_comparison2
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(value)) +
geom_histogram(binwidth = .01) +
facet_grid(cols = vars(type_of_index))
fig_index_comparison2
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(value)) +
geom_histogram(binwidth = .01) +
facet_grid(rows = vars(type_of_index)) +
xlim(-0.8,0.8)
fig_index_comparison2
fig_index_comparison <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_grid(cols = vars(type_of_index)) +
xlim(-0.8,0.8)
fig_index_comparison
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(value)) +
geom_histogram(binwidth = .01) +
facet_grid(rows = vars(type_of_index)) +
ylim(-0.8,0.8)
fig_index_comparison
fig_index_comparison <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_grid(cols = vars(type_of_index)) +
ylim(-0.8,0.8)
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(value)) +
geom_histogram(binwidth = .01) +
facet_grid(rows = vars(type_of_index)) +
xlkim(-0.8,0.8)
fig_index_comparison
glimpse(dat)
glimpse(data)
fig_index_comparison <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(aes(color=president),alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_grid(cols = vars(type_of_index)) +
ylim(-0.8,0.8) +
labs(title = "Comparing sentiment values by afinn and sentimentr over time")
fig_index_comparison
fig_index_comparison1 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(aes(color=president),alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
facet_grid(cols = vars(type_of_index)) +
ylim(-0.8,0.8) +
theme(legend.position = "top") +
labs(title = "Comparing sentiment values by afinn and sentimentr over time")
fig_index_comparison1
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(value)) +
geom_histogram(binwidth = .01) +
facet_grid(rows = vars(type_of_index)) +
xlkim(-0.8,0.8) +
labs(title = "Comparing the density of sentiment values by afinn and sentimentr")
fig_index_comparison2
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(value)) +
geom_histogram(binwidth = .01) +
facet_grid(rows = vars(type_of_index)) +
xlim(-0.8,0.8) +
labs(title = "Comparing the density of sentiment values by afinn and sentimentr")
fig_index_comparison2
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(aes(color=president),alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
geom_rect(aes(fill = president))
facet_grid(cols = vars(type_of_index)) +
ylim(-0.8,0.8) +
theme(legend.position = "top") +
labs(title = "Comparing sentiment values by afinn and sentimentr over time")
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(aes(color=president),alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
geom_rect(aes(fill = president))
facet_grid(cols = vars(type_of_index)) +
ylim(-0.8,0.8) +
theme(legend.position = "top") +
labs(title = "Comparing sentiment values by afinn and sentimentr over time")
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(aes(color=president),alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
geom_rect(aes(fill = party), alpha = 0.1)
facet_grid(cols = vars(type_of_index)) +
ylim(-0.8,0.8) +
theme(legend.position = "top") +
labs(title = "Comparing sentiment values by afinn and sentimentr over time")
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(aes(color=president),alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
geom_rect(aes(fill = party), alpha = 0.1) +
facet_grid(cols = vars(type_of_index)) +
ylim(-0.8,0.8) +
theme(legend.position = "top") +
labs(title = "Comparing sentiment values by afinn and sentimentr over time")
fig_index_comparison2
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(aes(color=president),alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
geom_rect(aes(fill = party, ymin=ystart, ymax=yend, xmin=xstart, xmax=xend), alpha = 0.1) +
facet_grid(cols = vars(type_of_index)) +
ylim(-0.8,0.8) +
theme(legend.position = "top") +
labs(title = "Comparing sentiment values by afinn and sentimentr over time")
fig_index_comparison2
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(aes(color=president),alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
geom_rect(aes(fill = party, ymin=0, ymax=80, xmin=xstart, xmax=xend), alpha = 0.1) +
facet_grid(cols = vars(type_of_index)) +
ylim(-0.8,0.8) +
theme(legend.position = "top") +
labs(title = "Comparing sentiment values by afinn and sentimentr over time")
fig_index_comparison2
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(aes(color=president),alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
geom_rect(aes(NULL, NULL, xmin=xstart, xmax=xend, fill = party), ymin=(-2), ymax=2, color="white", size=.5, alpha = 0.2) +
scale_fill_manual(values=c("Democrat" = "blue", "Republican" = "red")) +
geom_text(aes(x=median_x,y=1,label=president), size=3) +
facet_grid(cols = vars(type_of_index)) +
ylim(-0.8,0.8) +
theme(legend.position = "top") +
labs(title = "Comparing sentiment values by afinn and sentimentr over time")
fig_index_comparison2
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(aes(color=president),alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
geom_rect(aes(NULL, NULL, xmin=start, xmax=end, fill = party), ymin=(-2), ymax=2, color="white", size=.5, alpha = 0.2) +
scale_fill_manual(values=c("Democrat" = "blue", "Republican" = "red")) +
geom_text(aes(x=median_x,y=1,label=president), size=3) +
facet_grid(cols = vars(type_of_index)) +
ylim(-0.8,0.8) +
theme(legend.position = "top") +
labs(title = "Comparing sentiment values by afinn and sentimentr over time")
fig_index_comparison2
fig_index_comparison2 <- ggplot(data %>% gather(key = "type_of_index", value = "value", c(sent_afinn_weighted, sentiment_valence)), aes(x=date,y=value)) +
geom_point(aes(color=president),alpha = 0.2) +
geom_smooth(aes(x=date,y=value),method=lm, se=FALSE) +
geom_text(aes(x=median_x,y=1,label=president), size=3) +
facet_grid(cols = vars(type_of_index)) +
ylim(-0.8,0.8) +
theme(legend.position = "top") +
labs(title = "Comparing sentiment values by afinn and sentimentr over time")
fig_index_comparison2
